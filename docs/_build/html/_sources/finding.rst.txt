Поиск маркера
=================

.. danger:: От начала и до конца процесс должен проходить в один подход - остановиться на серединке и отложить "на попозже" не получится

Подготовка
------------------
Дополним структуру файлов на Гугл Диск:

.. figure:: pictures/дерево_2.png
       :scale: 80 %
       :align: center
       :alt: alternate text


.. attention:: Так же, в папку **Models** необходимо подгрузить файл **coco128.yaml**. Он находится в репозитории на github.

Разметку будем производить так же с помощью collab, с помощью моделей YOLO. В репозитории лежить полностью готовый код для YOLOv5, YOLOv3 и YOLOv3tiny. Подробнее о том, в каких случаях какой использовать, можно почитать здесь:

:Важно:
    Скопированный collab должен лежать ВНЕ папки **VisionProject**

Боксинг
----------------

.. tip:: Некоторые блоки даны с сохранением выводов. Сверяйте их с теми, что получатся у вас в качестве доп.проверки.

Боксинг - это помещение маркера внутрь прямоугольного сектора, грани которого проходят через крайние точки выделенного маркера. То есть, появление того самого красивого прямоугольничка, который нам нужен.
Происходит этот процесс в блоках с **#1** по **#14**. В **#1** нужно будет дать разрешение (как вот здесь: :ref:`studyseg`)

Если вы соблюли структуру файлов, то просто запускайте по порядку блоки. Если вы все же используете другую структуру, то смотрите вот сюда: :ref:`mainfailinf` и сюда: :ref:`yolopaths`

Если появятся проблемы в блоках с "базовыми коммандами" (cd, ls), смотрите сюда: :ref:`basecomm`

От начала и до конца процесс займет порядка получаса (при датасете в ~4000 кадров).

В **YOLOv5**, **YOLOv3** и **YOLOv3tiny** данный этап проходит одинаково.

Подключение YOLO
-----------------

Продолжаем запускать по порядку блоки.

**Несколько уточнений:**

(**YOLOv5**) Блоки **#15** и **#17** отвечают за подключение YOLO и установку зависимостей соответственно. После их запуска должна быть выведена "простыня" из различных уведомлений.

.. tip:: Если среди уведомлений появится пара строк красного кода, но подключение не прервется и закончится фразой со словом "Successfully" - сделайте вид, что красных строчек не было.

(**YOLOv3** и **YOLOv3tiny**) К блокам **#15** и **#17** добавляется **#18** - скачивание весов. Принцип определения правильности работы такой же.


Запуск обучения
----------------------

**Продолжаем запускать по порядку.**

После выполнения блока **#20** (**YOLOv5**) или **#22** (**YOLOv3** и **YOLOv3tiny**) должно быть выведено содержимое файла **coco128.yaml**. Убедитесь, что в нем есть:

Training and Test file path
::

    train: /content/train/images
    val: /content/test/images

Number of classes and Class names.
::

    # Classes
    nc: 1  # number of classes
    names: ['Marker']  # class names

Обучение запускается в блоке **#22** (**YOLOv5**):
::

    !python train.py --img 416 --batch 8 --epochs 50 --data coco128.yaml --weights yolov5s.pt --nosave --cache

В блоке **#25** (**YOLOv3**):
::

    !python train.py --img 416 --batch 8 --epochs 50 --data coco128.yaml --weights yolov3.pt --nosave --cache

И в блоке **#23** (**YOLOv3tiny**):
::

    !python train.py --img 416 --batch 8 --epochs 50 --data coco128.yaml --weights yolov3-tiny.pt --nosave --cache

В **YOLOv3** и **YOLOv3tiny** сразу после запуска вам предложат зарегистрироваться на сайте Wandb - там можно будет отслеживать результаты обучения в режиме реального времени. Делать это или нет- решайте сами.

Обучение будет длиться очень долго - от 4 часов и до "бесконечности".

.. danger:: Все это время вы должны находится рядом с компьютером (работать за ним) - иначе весь прогресс может быть **сброшен**!

Визуализация результатов
--------------------------------

**Продолжаем запускать по порядку.**

Блок **#24** (**YOLOv5**, **YOLOv3tiny**) или **#26** (**YOLOv3**) в выводе дает нам окно с графиками по данным, полученным за время обучения модели. Скачать их получится только в формате изображения.

Если вам все-таки нужны эти данные, есть способ скачать их в формате csv: в самом конце вывода блока обучания будет указана папка, в которую будут сохранены результаты. Скорее всего это будет:

.. figure:: pictures/резалт_сэйв.png
       :scale: 110 %
       :align: center
       :alt: alternate text

Перенести данные на гугл диск можно командой формата:
::

    !cp /content/yolov5/<указанный путь>/файл.csv <путь к файлу, по которому вы хотите его сохранить>/файл.csv

Сделать это однако лучше **после** выполнения следующего пункта.

Тестирование
-----------------

Продолжаем.

После выполнения блока **#25** (**YOLOv5**), **#27** (**YOLOv3tiny**) или **#28** (**YOLOv3**) в папке **VisionProject/Model** появится модель обученная моделька.

Разметка видео
---------------------

Мы наконец-то добрались! Осталось совсем немного)

Продолжаем запускать, предварительно загрузив видео для разметки в папку **VisionProject/Video**!

Блок **#29** (**YOLOv5**), **#30** (**YOLOv3tiny**) или **#31** (**YOLOv3**) запускает обработку видео.
Пример:
::

    !python detect.py **--source /content/drive/MyDrive/VisionProject/Videos/video2.mp4** --weights /content/yolov3/weight1.pt --img 416 --save-txt --save-conf

.. tip:: Не забудьте поменять название видео!

Разметка также может длиться достаточно долго. Помните, что отходить от компьютера далеко нельзя.


Сохранение размеченного видео
-------------------------------

Последний рывок!

Последние блоки отвечают за сохранение видео. Пример:
::

    !mv /content/yolov5/<указанный путь>/видео.mp4 /content/drive/MyDrive/VisionProject/Resault/видео.mp4

<Указанный путь> будет дан в выводе блока разметки видео, в самом конце.

Видео будет сохранено в папку **VisionProject/Resault**.
